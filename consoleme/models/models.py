# generated by datamodel-codegen:
#   filename:  swagger.yaml
#   timestamp: 2020-05-13T21:55:05+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, constr


class ResourceModel(BaseModel):
    arn: str = Field(..., description='resource ARN')
    account_id: str = Field(..., description='AWS account ID')
    account_name: str = Field(..., description='human-friendly AWS account name')
    policy_sha256: str = Field(
        ..., description='hash of the most recent resource policy seen by ConsoleMe'
    )
    policy: str
    owner: str = Field(
        ..., description='email address of team or individual who owns this resource'
    )
    approvers: List[str]
    resource_type: str
    last_updated: datetime = Field(
        ..., description='last time resource was updated from source-of-truth'
    )


class RequestModel(BaseModel):
    id: str
    arn: str = Field(..., description='ARN of principal being modified')
    timestamp: datetime
    justification: str
    requester_email: str
    approvers: List[str] = Field(
        ...,
        description='list of approvers, derived from approvers of `resource`s in `changes`',
    )
    status: str


class ChangeType(Enum):
    inline_policy = 'inline_policy'
    managed_policy = 'managed_policy'
    resource_policy = 'resource_policy'


class ChangeModel(BaseModel):
    change_type: ChangeType
    resource: ResourceModel


class Action(Enum):
    attach = 'attach'
    detach = 'detach'


class ManagedPolicyChangeModel(ChangeModel):
    arn: str
    policy_name: str
    action: Action


class PolicyModel(BaseModel):
    policy_document: str = Field(..., description='JSON policy document')
    policy_sha256: str = Field(..., description='hash of policy_document')


class RoleModel(BaseModel):
    name: str
    account_id: Optional[constr(min_length=12, max_length=12)] = None
    account_name: Optional[str] = None
    arn: Optional[str] = None


class ExtendedRoleModel(RoleModel):
    inline_policies: List[Dict[str, Any]]
    assume_role_policies: List[Dict[str, Any]]
    managed_policies: List[Dict[str, Any]]
    tags: List[Dict[str, Any]]
    templated: Optional[bool] = None
    template_link: Optional[str] = None


class UserModel(BaseModel):
    email: Optional[str] = None
    extended_info: Optional[Dict[str, Any]] = None


class InlinePolicyChangeModel(ChangeModel):
    arn: str
    additional_arns: Optional[str] = Field(
        None,
        description='additional ARNs relevant to request, e.g. S3 bucket ARN with path prefix',
    )
    policy_name: str
    new: bool
    policy: PolicyModel
    old_policy: Optional[PolicyModel] = None


class ResourcePolicyChangeModel(ChangeModel):
    arn: str
    policy: PolicyModel
    old_policy: Optional[PolicyModel] = None


class CommentModel(BaseModel):
    id: str
    timestamp: datetime
    edited: Optional[bool] = None
    last_modified: Optional[datetime] = None
    user_email: str
    user: Optional[UserModel] = None
    text: str


class ExtendedRequestModel(RequestModel):
    changes: List[
        InlinePolicyChangeModel, ManagedPolicyChangeModel, ResourcePolicyChangeModel
    ]
    requester_info: UserModel
    reviewer: Optional[str] = None
    comments: Optional[CommentModel] = None
