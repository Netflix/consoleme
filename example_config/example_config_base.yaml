access_requests:
  default_approver: admin@example.com
api_auth:
  valid_entities:
    - fake_api_entity
auth_cookie_name: consoleme_auth
application_admin: consoleme_admins@example.com
application_name: consoleme
account_ids_to_name:
  123456789012: default_account
  123456789013: prod
  123456789014: test

auth:
  get_groups_by_header: true
  get_user_by_header: true
  get_user_by_oauth: false
  get_user_by_saml: false
  groups_header_name: group_header
  user_header_name: user_header

aws:
  console_url: 'https://{}.console.aws.amazon.com'
  federation_url: 'https://signin.aws.amazon.com/federation'
  iamroles_dynamo_table: consoleme_iamroles_global
  iamroles_redis_key: IAM_ROLE_CACHE
  issuer: YourCompany
  requests_dynamo_table: consoleme_requests_global
  session_duration: 43200
celery:
  active_region: us-west-2 # Some jobs should only run in one region.
challenge:
  token_expiration: 3600
cli_auth:
  certificate_header: certificate_header
  required_headers:
    - RequiredMTLSHeader: RequiredMTLSHeaderValue

consoleme:
  recently_used_cookie_name: consoleme_activity
  show_recently_used_roles: true
errors:
  custom_max_cert_age_message: "Please refresh your certificate."
get_eligible_roles:
  from_config: true
  from_prefix: false

headers:
  # The Google Groups features do not fully work in the OSS version of ConsoleMe. Please contact the developers if you
  # need this feature.
  group_access:
    enabled: false
  policies:
    enabled: true
  config:
    enabled: true

enable_self_service: true

dynamic_config:
  group_mapping:
    groupa@example.com:
      roles:
        - arn:aws:iam::123456789012:role/roleA
        - arn:aws:iam::123456789012:role/roleB

groups:
  can_edit_config:
    - configeditors@example.com

jwt:
  groups_key: groups
  email_key: email
  expiration_hours: 1

# If desired, you can configure Google Analytics here
# google_analytics:
#    tracking_id: 12345

#google:
#  admin_scopes:
#    - 'https://www.googleapis.com/auth/admin.directory.group'
#  credential_subject:
#    example.com: exampleapiuser@example.com
#    example2.com: exampleapiuser@example2.com
#group_mapping_config:
#  recent_users_key: RECENT_USERS
#  role_cache_expiration: 21600
#  role_cache_redis_key: 'ROLE_CACHE_{}'
#  update_frequency: 300
#groups:
#  attributes:
#    boolean:
#      - label: Requestable
#        name: requestable
#        sensitive: false
#    list:
#      - label: Secondary Approvers
#        name: secondary_approvers
#        placeholder: 'group1@example.com,group2@example.com'
#        sensitive: false
#      - label: Self-approval Groups
#        name: self_approval_groups
#        placeholder: 'group1@example.com,group2@example.com'
#        sensitive: false
#      - label: Emails to notify when users are added
#        name: alert_on_changes
#        placeholder: 'group1@example.com,group2@example.com'
#        sensitive: false
#      - label: Owners
#        name: owner
#        placeholder: 'group1@example.com,group2@example.com'
#        sensitive: false
#  can_admin:
#    - admin@example.com
#  can_admin_policies:
#    - admin@example.com
#  developement_notification_emails:
#    - developer@example.com
#  can_audit:
#    - auditors@example.com
#  can_edit_config:
#    - configeditors@example.com
#  can_edit_policies:
#    - policyeditors@example.com
#  can_edit_sensitive_attributes:
#    - sensitiveattributeeditors@example.com
#  require_bg_check:
#    - sensitivegroup@example.com

plugins:
  auth: default_auth
  aws: default_aws
  group_mapping: default_group_mapping
  internal_celery_tasks: default_celery_tasks
  internal_celery_tasks_functions: default_celery_tasks_functions
  metrics: default_metrics
  internal_config: config
  internal_routes: default_internal_routes
  internal_policies: default_policies

logging_levels:
  asyncio: WARNING
  boto3: CRITICAL
  boto: CRITICAL
  botocore: CRITICAL
  elasticsearch.trace: ERROR
  elasticsearch: ERROR
  nose: CRITICAL
  parso.python.diff: WARNING
  raven.base.client: WARNING
  s3transfer: CRITICAL
  spectator.HttpClient: WARNING
  spectator.Registry: WARNING
  urllib3: ERROR

# Warning: Tracing has performance implications. We recommend against 100% sample_rate in a production environment.
# Enabling tracing in development will also override your ability to debug in your IDE. If you're
# running in docker, be sure to start Zipkin at the same time as your other containers
# ex: `docker-compose -f docker-compose.yaml -f docker-compose-dependencies.yaml -f docker-compose-zipkin.yaml up`
# To test, browse to Local ConsoleMe and confirm you see the trace in Zipkin at http://localhost:9411
tracing:
  application_name: consoleme
  enabled: false # False by default, override in account-specific configuration
  sample_rate: 100 # Percentage of requests
  zipkin_address: http://consoleme_zipkin:9411/api/v2/spans
  in_scope_function_calls:
    - /consoleme/
    - /consoleme-internal/

#policies:
#  role_name: ConsoleMeRole

#sso:
#  enabled: true
#  jwk_url: https://provider.example.com/ext/oauth/something/jwks
#  jwk_schema:
#    header:
#      alg:
#        enum:
#          - RS512
#    payload:
#      iss:
#        enum:
#          - https://provider.example.com