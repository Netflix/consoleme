access_requests:
  default_approver: admin@example.com
api_auth:
  valid_entities:
    - fake_api_entity
auth_cookie_name: consoleme_auth
application_admin: consoleme_admins@example.com
application_name: consoleme

# Replace with a mapping of your account IDs to account names. Be sure to use quotes around the account_id, otherwise
# it will be interpreted as an integer, which is problematic for account_ids that begin with a 0
account_ids_to_name:
  "123456789012":
    - default_account
  "123456789013":
    - prod
  "123456789014":
    - test

# Replace with a mapping of your apps to IAM roles. We strongly recommend modifying your internal plugins to retrieve
# this information rather than manually modifying this configuration file.
apps_to_roles:
  app1:
    - arn:aws:iam::123456789012:role/app1InstanceProfile
  app2:
    - arn:aws:iam::123456789012:role/app2InstanceProfile
    - arn:aws:iam::123456789013:role/app2InstanceProfile

auth:
  get_groups_by_header: true
  get_user_by_header: true
  get_user_by_oauth: false
  get_user_by_saml: false
  groups_header_name: group_header
  user_header_name: user_header

aws:
  console_url: 'https://{}.console.aws.amazon.com'
  federation_url: 'https://signin.aws.amazon.com/federation'
  iamroles_dynamo_table: consoleme_iamroles_global
  iamroles_redis_key: IAM_ROLE_CACHE
  issuer: YourCompany
  requests_dynamo_table: consoleme_requests_global
  session_duration: 43200
celery:
  active_region: us-west-2 # Some jobs should only run in one region.
challenge:
  token_expiration: 3600
cli_auth:
  certificate_header: certificate_header
  required_headers:
    - RequiredMTLSHeader: RequiredMTLSHeaderValue

consoleme:
  recently_used_cookie_name: consoleme_activity
  show_recently_used_roles: true
errors:
  custom_max_cert_age_message: "Please refresh your certificate."
get_eligible_roles:
  from_config: true
  from_prefix: false

headers:
  # The Google Groups features do not fully work in the OSS version of ConsoleMe. Please contact the developers if you
  # need this feature.
  group_access:
    enabled: false
  policies:
    enabled: true
  config:
    enabled: true

enable_self_service: true

dynamic_config:
  group_mapping:
    groupa@example.com:
      roles:
        - arn:aws:iam::123456789012:role/firstAccountRole
        - arn:aws:iam::123456789012:role/firstAccountRole2
        - arn:aws:iam::123456789013:role/secondAccountRole
        - arn:aws:iam::123456789014:role/thirdAccountRole

groups:
  can_edit_config:
    - configeditors@example.com

jwt:
  groups_key: groups
  email_key: email
  expiration_hours: 1

# If desired, you can configure Google Analytics here
# google_analytics:
#    tracking_id: 12345

#google:
#  admin_scopes:
#    - 'https://www.googleapis.com/auth/admin.directory.group'
#  credential_subject:
#    example.com: exampleapiuser@example.com
#    example2.com: exampleapiuser@example2.com
#group_mapping_config:
#  recent_users_key: RECENT_USERS
#  role_cache_expiration: 21600
#  role_cache_redis_key: 'ROLE_CACHE_{}'
#  update_frequency: 300
#groups:
#  attributes:
#    boolean:
#      - label: Requestable
#        name: requestable
#        sensitive: false
#    list:
#      - label: Secondary Approvers
#        name: secondary_approvers
#        placeholder: 'group1@example.com,group2@example.com'
#        sensitive: false
#      - label: Self-approval Groups
#        name: self_approval_groups
#        placeholder: 'group1@example.com,group2@example.com'
#        sensitive: false
#      - label: Emails to notify when users are added
#        name: alert_on_changes
#        placeholder: 'group1@example.com,group2@example.com'
#        sensitive: false
#      - label: Owners
#        name: owner
#        placeholder: 'group1@example.com,group2@example.com'
#        sensitive: false
#  can_admin:
#    - admin@example.com
#  can_admin_policies:
#    - admin@example.com
#  developement_notification_emails:
#    - developer@example.com
#  can_audit:
#    - auditors@example.com
#  can_edit_config:
#    - configeditors@example.com
#  can_edit_policies:
#    - policyeditors@example.com
#  can_edit_sensitive_attributes:
#    - sensitiveattributeeditors@example.com
#  require_bg_check:
#    - sensitivegroup@example.com

plugins:
  auth: default_auth
  aws: default_aws
  group_mapping: default_group_mapping
  internal_celery_tasks: default_celery_tasks
  internal_celery_tasks_functions: default_celery_tasks_functions
  metrics: default_metrics
  internal_config: config
  internal_routes: default_internal_routes
  internal_policies: default_policies

logging_levels:
  asyncio: WARNING
  boto3: CRITICAL
  boto: CRITICAL
  botocore: CRITICAL
  elasticsearch.trace: ERROR
  elasticsearch: ERROR
  nose: CRITICAL
  parso.python.diff: WARNING
  raven.base.client: WARNING
  s3transfer: CRITICAL
  spectator.HttpClient: WARNING
  spectator.Registry: WARNING
  urllib3: ERROR

# Warning: Tracing has performance implications. We recommend against 100% sample_rate in a production environment.
# Enabling tracing in development will also override your ability to debug in your IDE. If you're
# running in docker, be sure to start Zipkin at the same time as your other containers
# ex: `docker-compose -f docker-compose.yaml -f docker-compose-dependencies.yaml -f docker-compose-zipkin.yaml up`
# To test, browse to Local ConsoleMe and confirm you see the trace in Zipkin at http://localhost:9411
tracing:
  application_name: consoleme
  enabled: false # False by default, override in account-specific configuration
  sample_rate: 100 # Percentage of requests
  zipkin_address: http://consoleme_zipkin:9411/api/v2/spans
  in_scope_function_calls:
    - /consoleme/
    - /consoleme-internal/

cache_all_resources_from_aws_config:
  aws_config:
    all_resources_query: select * where accountId = '{account_id}'
  redis_key: ALL_RESOURCE_ARNS

aws_config_cache:
  redis_key: AWSCONFIG_RESOURCE_CACHE
  s3:
    bucket: consoleme_bucket
    file: aws_config_cache/cache_{account_id}_v1.json

#policies:
#  role_name: ConsoleMeRole

#sso:
#  enabled: true
#  jwk_url: https://provider.example.com/ext/oauth/something/jwks
#  jwk_schema:
#    header:
#      alg:
#        enum:
#          - RS512
#    payload:
#      iss:
#        enum:
#          - https://provider.example.com

# Note: Do not put anything sensitive in the self_service_iam key. This may be exposed to the frontend UI
self_service_iam:
  permissions_map:
    s3:
      text: S3 Bucket
      description: S3 Permissions
      inputs:
        - name: resource_arn
          type: typeahead_input
          text: Bucket Name
          required: true
          typeahead_endpoint: /policies/typeahead?resource=s3&show_full_arn_for_s3_buckets=true&search={query}
        - name: bucket_prefix
          type: text_input
          text: Prefix (Folder under S3 that you need access to).
          required: true
          default: /*
      action_map:
        - name: list
          text: List
          permissions:
            - s3:ListBucket
            - s3:ListBucketVersions
        - name: get
          text: Get
          permissions:
            - s3:GetObject
            - s3:GetObjectTagging
            - s3:GetObjectVersion
            - s3:GetObjectVersionTagging
            - s3:GetObjectAcl
            - s3:GetObjectVersionAcl
        - name: put
          text: Put
          permissions:
            - s3:PutObject
            - s3:PutObjectTagging
            - s3:PutObjectVersionTagging
            - s3:ListMultipartUploadParts*
            - s3:AbortMultipartUpload
            - s3:RestoreObject
        - name: delete
          text: Delete
          permissions:
            - s3:DeleteObject
            - s3:DeleteObjectTagging
            - s3:DeleteObjectVersion
            - s3:DeleteObjectVersionTagging
    sqs:
      text: SQS Queue
      description: ""
      inputs:
        - name: resource_arn
          type: typeahead_input
          text: Queue ARN
          required: true
          typeahead_endpoint: /policies/typeahead?resource=sqs&search={query}
      action_map:
        - name: get_queue_attributes
          text: Get Queue Attributes
          permissions:
            - sqs:GetQueueAttributes
            - sqs:GetQueueUrl
        - name: send_messages
          text: Send Message
          permissions:
            - sqs:SendMessage
        - name: receive_messages
          text: Receive Message
          permissions:
            - sqs:ReceiveMessage
        - name: delete_messages
          text: Delete Message
          permissions:
            - sqs:DeleteMessage
        - name: set_queue_attributes
          text: Set Queue Attributes
          permissions:
            - sqs:SetQueueAttributes
    sns:
      text: SNS Topic
      description: ""
      inputs:
        - name: resource_arn
          type: typeahead_input
          text: Topic ARN
          required: true
          typeahead_endpoint: /policies/typeahead?resource=sns&search={query}
      action_map:
        - name: get_topic_attributes
          text: Get Topic Attributes
          permissions:
            - sns:GetEndpointAttributes
            - sns:GetTopicAttributes
        - name: publish
          text: Publish
          permissions:
            - sns:Publish
        - name: subscribe
          text: Subscribe
          permissions:
            - sns:Subscribe
            - sns:ConfirmSubscription
        - name: unsubscribe
          text: Unsubscribe
          permissions:
            - sns:Unsubscribe
    rds:
      text: RDS
      description: ""
      inputs:
        - name: resource_arn
          type: text_input
          text: EC2 resource you need access to
          required: true
          default: "arn:aws:iam::{account_id}:role/rds-monitoring-role"
      action_map:
        - name: passrole
          text: PassRole
          permissions:
            - iam:PassRole
    ec2:
      text: EC2
      description: ""
      inputs:
        - name: resource_arn
          type: text_input
          text: EC2 resource you need access to
          required: true
          default: "*"
      action_map:
        - name: volmount
          text: VolMount
          permissions:
            - ec2:attachvolume
            - ec2:createvolume
            - ec2:describelicenses
            - ec2:describevolumes
            - ec2:detachvolume
            - ec2:reportinstancestatus
            - ec2:resetsnapshotattribute
    route53:
      text: Route53
      description: ""
      inputs:
        - name: resource_arn
          type: text_input
          text: Route53 Domain you need access to
          required: true
          default: "*"
      action_map:
        - name: list_records
          text: List Records
          permissions:
            - route53:listresourcerecordsets
        - name: change_records
          text: Change Records
          permissions:
            - route53:changeresourcerecordsets
    sts:
      text: STS AssumeRole
      description: ""
      inputs:
        - name: resource_arn
          type: typeahead_input
          text: Role ARN yhat you wish to assume
          required: true
          typeahead_endpoint: /policies/typeahead?resource=iam_arn&search={query}
      action_map:
        - name: assume_role
          text: Assume Role
          permissions:
            - sts:AssumeRole
    crud_lookup:
      text: Other
      description: |-
        Define the service (ssm, rds, route53, etc), the resource (An ARN or a wildcard), and the list of actions
        (List, Read, Write, Permissions Management, Tagging) that you need access to. If you know the specific IAM
        permissions you need, use "Advanced Mode" from the dropdown instead.
      inputs:
        - name: service
          type: text_input
          text: Service (s3, sqs, sns, ssm, etc)
          required: true
        - name: resource_arn
          type: text_input
          text: Resource ARN or Wildcard (*)
          required: true
          default: "*"
      action_map:
        - name: list
          text: List
          permissions:
            - List
        - name: read
          text: Read
          permissions:
            - Read
        - name: write
          text: Write
          permissions:
            - Write
        - name: permissions_management
          text: Permissions Management
          permissions:
            - Permissions management
        - name: tagging
          text: Tagging
          permissions:
            - Tagging