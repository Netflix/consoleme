# Enter your team's e-mail address here. This e-mail will be used as the default approvers of IAM policy requests
application_admin: consoleme_admins@example.com

# These are the tornado settings. Set `debug` to false in production.
tornado:
  debug: true
  port: 8081
  xsrf: true
  xsrf_cookie_kwargs:
    samesite: strict

# ConsoleMe needs to know about your AWS accounts. ConsoleMe can retrieve a list of your accounts from the following
# sources:
# 1) Your local configuration file (See the account_ids_to_name key below)
# 2) AWS Organizations (See the cache_accounts_from_aws_organizations key below)
# 3) Swag ( https://github.com/Netflix-Skunkworks/swag-api) (See the retrieve_accounts_from_swag key below)
# 4) Your current AWS credentials. If you do not configure any sources to retrieve information about your AWS accounts,
#    ConsoleMe will use the current credentials and attempt to determine account information. If Celery tasks are ran,
#    ConsoleMe will attempt to sync resources from this account.

#account_ids_to_name:
#  "123456789012": default_account
#  "123456789013": prod
#  "123456789014": test

#cache_accounts_from_aws_organizations:
#  # This is the account ID of your AWS organizations master
#  organizations_master_account_id: "123456789012"
#  # This is the name of the role that consoleme will attempt to assume on your Organizations master account to retrieve
#  # account information. Ensure that ConsoleMe can assume this role, and that this role has the permission:
#  # organizations:listaccounts
#  organizations_master_role_to_assume: "ConsoleMe"

#retrieve_accounts_from_swag:
#  base_url: 'https://your_swag_url/'

# The `cloud_credential_authorization_mapping` configuration is where you would define the IAM role tags that dictate
# which users/groups are authorized to access the role. The tag keys are defined below.
# The tag values should be set to a colon-delimited list of users or groups (Commas are not valid in tag values).
# Users/groups defined in the `authorized_groups_tags` tag can retrieve credentials from ConsoleMe either via the CLI
# or the web interface. Users/groups defined in the `authorized_groups_cli_only_tags` tag can only retreive credentials
# via the CLI, and will not see the roles in ConsoleMe's UI. This is useful to keep the UI uncluttered.
# Example IAM role tags:
# consoleme-authorized=user1@example.com:group2@example.com
# consoleme-owner-dl=appowner@example.com
# consoleme-authorized-cli-only=group3@example.com
cloud_credential_authorization_mapping:
  role_tags:
    enabled: true
    authorized_groups_tags:
      - consoleme-authorized
    authorized_groups_cli_only_tags:
      - consoleme-owner-dl
      - consoleme-authorized-cli-only

aws:
  issuer: YourCompany

celery:
  # Some jobs should only run in one region. The `active_region` key should define your primary region.
  active_region: us-west-2
  # celery.sync_regions specifies which regions to sync resources from, such as SQS queues and SNS topics
  sync_regions:
    - us-east-1
    - us-west-2
    - eu-west-1

# If you want to retrieve credentials through mutual TLS, you'll need to use something fronting ConsoleMe to do the
# certificate validation. It should pass down a "Success" header, and a header with the certificate. You'll need to
# implement your own certificate parsing logic.
# Refer to consoleme/default_plugins/consoleme_default_plugins/plugins/auth/auth.py
cli_auth:
  certificate_header: certificate_header
  required_headers:
    - RequiredMTLSHeader: RequiredMTLSHeaderValue

# This is where you can define groups that can modify ConsoleMe's dynamic configuration and administer
# IAM/S3/SQS/SNS policies.
groups:
  can_edit_config:
    - configeditors@example.com
  can_admin_policies:
    - consoleme_admins@example.com

jwt:
  email_key: email

#groups:
#  can_admin:
#    - admin@example.com
#  can_admin_policies:
#    - admin@example.com
#  developement_notification_emails:
#    - developer@example.com
#  can_edit_config:
#    - configeditors@example.com
#  can_edit_policies:
#    - policyeditors@example.com

# You can define support contact information and custom documentation here. This information is displayed in ConsoleMe's
# sidebar.
support_contact: consoleme-support@example.com
support_chat_url: https://www.example.com/slack/channel
documentation_page: https://github.com/Netflix/consoleme/

plugins:
  auth: default_auth
  aws: default_aws
  group_mapping: default_group_mapping
  internal_celery_tasks: default_celery_tasks
  internal_celery_tasks_functions: default_celery_tasks_functions
  metrics: default_metrics
  internal_config: config
  internal_routes: default_internal_routes
  internal_policies: default_policies

logging_levels:
  asyncio: WARNING
  boto3: CRITICAL
  boto: CRITICAL
  botocore: CRITICAL
  elasticsearch.trace: ERROR
  elasticsearch: ERROR
  nose: CRITICAL
  parso.python.diff: WARNING
  s3transfer: CRITICAL
  spectator.HttpClient: WARNING
  spectator.Registry: WARNING
  urllib3: ERROR

#policies:
#  role_name: ConsoleMeRole

#sso:
#  enabled: true
#  jwk_url: https://provider.example.com/ext/oauth/something/jwks
#  jwk_schema:
#    header:
#      alg:
#        enum:
#          - RS512
#    payload:
#      iss:
#        enum:
#          - https://provider.example.com

# Note: Do not put anything sensitive in the self_service_iam key. This will be exposed to the frontend UI
self_service_iam:
  permissions_map:
    s3:
      text: S3 Bucket
      description: S3 Permissions
      inputs:
        - name: resource_arn
          type: typeahead_input
          text: Bucket Name
          required: true
          typeahead_endpoint: /policies/typeahead?resource=s3&show_full_arn_for_s3_buckets=true&search={query}
        - name: bucket_prefix
          type: text_input
          text: Prefix (Folder under S3 that you need access to).
          required: true
          default: /*
      action_map:
        - name: list
          text: List
          permissions:
            - s3:ListBucket
            - s3:ListBucketVersions
        - name: get
          text: Get
          permissions:
            - s3:GetObject
            - s3:GetObjectTagging
            - s3:GetObjectVersion
            - s3:GetObjectVersionTagging
            - s3:GetObjectAcl
            - s3:GetObjectVersionAcl
        - name: put
          text: Put
          permissions:
            - s3:PutObject
            - s3:PutObjectTagging
            - s3:PutObjectVersionTagging
            - s3:ListMultipartUploadParts*
            - s3:AbortMultipartUpload
        - name: delete
          text: Delete
          permissions:
            - s3:DeleteObject
            - s3:DeleteObjectTagging
            - s3:DeleteObjectVersion
            - s3:DeleteObjectVersionTagging
    sqs:
      text: SQS Queue
      description: ""
      inputs:
        - name: resource_arn
          type: typeahead_input
          text: Queue ARN
          required: true
          typeahead_endpoint: /policies/typeahead?resource=sqs&search={query}
      action_map:
        - name: send_messages
          text: Send Message (Queue Producer)
          permissions:
            - sqs:GetQueueAttributes
            - sqs:GetQueueUrl
            - sqs:SendMessage
        - name: receive_messages
          text: Receive/Delete Messages (Queue Consumer)
          permissions:
            - sqs:GetQueueAttributes
            - sqs:GetQueueUrl
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
        - name: set_queue_attributes
          text: Set Queue Attributes
          permissions:
            - sqs:SetQueueAttributes
        - name: purge_messages
          text: Purge Queue (You monster!)
          permissions:
            - sqs:PurgeQueue
    sns:
      text: SNS Topic
      description: ""
      inputs:
        - name: resource_arn
          type: typeahead_input
          text: Topic ARN
          required: true
          typeahead_endpoint: /policies/typeahead?resource=sns&search={query}
      action_map:
        - name: get_topic_attributes
          text: Get Topic Attributes
          permissions:
            - sns:GetEndpointAttributes
            - sns:GetTopicAttributes
        - name: publish
          text: Publish
          permissions:
            - sns:Publish
        - name: subscribe
          text: Subscribe
          permissions:
            - sns:Subscribe
            - sns:ConfirmSubscription
        - name: unsubscribe
          text: Unsubscribe
          permissions:
            - sns:Unsubscribe
    rds:
      text: RDS
      description: ""
      inputs:
        - name: resource_arn
          type: text_input
          text: EC2 resource you need access to
          required: true
          default: "arn:aws:iam::{account_id}:role/rds-monitoring-role"
      action_map:
        - name: passrole
          text: PassRole
          permissions:
            - iam:PassRole
    ec2:
      text: EC2
      description: ""
      inputs:
        - name: resource_arn
          type: text_input
          text: EC2 resource you need access to
          required: true
          default: "*"
      action_map:
        - name: volmount
          text: VolMount
          permissions:
            - ec2:attachvolume
            - ec2:createvolume
            - ec2:describelicenses
            - ec2:describevolumes
            - ec2:detachvolume
            - ec2:reportinstancestatus
            - ec2:resetsnapshotattribute
        - name: ipv6
          text: Enable IPv6
          permissions:
            - ec2:AssignIpv6Addresses
    route53:
      text: Route53
      description: ""
      inputs:
        - name: resource_arn
          type: text_input
          text: Route53 Domain you need access to
          required: true
          default: "*"
      action_map:
        - name: list_records
          text: List Records
          permissions:
            - route53:listresourcerecordsets
        - name: change_records
          text: Change Records
          permissions:
            - route53:changeresourcerecordsets
    sts:
      text: STS AssumeRole
      description: ""
      inputs:
        - name: resource_arn
          type: typeahead_input
          text: Role ARN that you wish to assume
          required: true
          typeahead_endpoint: /policies/typeahead?resource=iam_arn&search={query}
      action_map:
        - name: assume_role
          text: Assume Role
          permissions:
            - sts:AssumeRole
    ses:
      text: SES - Send Email
      inputs:
        - name: from_address
          type: text_input
          text: Email Address to send from
          required: true
          default: "emailaddress@example.com"
        - name: resource_arn
          type: text_input
          text: ARN of the resource to send from
          required: true
      condition:
        StringLike:
          ses:FromAddress: "{from_address}"
      action_map:
        - name: send_email
          text: Send Email
          permissions:
            - ses:SendEmail
            - ses:SendRawEmail
    crud_lookup:
      text: Other
      description: |-
        Define the service (rds, route53, rekognition, etc), the resource (An ARN or a wildcard), and the list of actions
        (List, Read, Write, Permissions Management, Tagging) that you need access to. If you know the specific IAM
        permissions you need, use "Advanced Mode" from the dropdown instead.
      inputs:
        - name: service_name
          type: typeahead_input
          text: Service (s3, sqs, sns, rekognition, etc)
          required: true
          typeahead_endpoint: /api/v1/policyuniverse/autocomplete/?only_filter_services=true&prefix={query}
        - name: resource_arn
          type: text_input
          text: Resource ARN or Wildcard (*)
          required: true
          default: "*"
      action_map:
        - name: list
          text: List
          permissions:
            - List
        - name: read
          text: Read
          permissions:
            - Read
        - name: write
          text: Write
          permissions:
            - Write
        - name: permissions-management
          text: Permissions Management
          permissions:
            - Permissions management
        - name: tagging
          text: Tagging
          permissions:
            - Tagging

# In your deployment, you'll probably want to move these to Dynamic Configuration at
# https://YOUR_CONSOLEME_DOMAIN/config
permission_templates:
  default:
    default: true
    label: Default Template
    policy: |-
      {
           "Statement":[
               {
                   "Action":[
                       ""
                   ],
                   "Effect":"Allow",
                   "Resource": [
                       ""
                   ]
               }
           ],
           "Version":"2012-10-17"
       }
  s3write:
    label: S3 Write Access
    policy: |-
      {
          "Statement":[
              {
                  "Action":[
                      "s3:ListBucket",
                      "s3:GetObject",
                      "s3:PutObject",
                      "s3:DeleteObject"
                  ],
                  "Effect":"Allow",
                  "Resource":[
                      "arn:aws:s3:::BUCKET_NAME",
                      "arn:aws:s3:::BUCKET_NAME/OPTIONAL_PREFIX/\*"
                  ],
                  "Sid":"s3readwrite"
              }
          ]
      }
  s3read:
    label: S3 Read Access
    policy: |-
      {
          "Statement":[
              {
                  "Action":[
                      "s3:ListBucket",
                      "s3:GetObject"
                  ],
                  "Effect":"Allow",
                  "Resource":[
                      "arn:aws:s3:::BUCKET_NAME",
                      "arn:aws:s3:::BUCKET_NAME/OPTIONAL_PREFIX/\*"
                  ],
                  "Sid":"s3readonly"
              }
          ]
      }
  sqs:
    label: SQS
    policy: |-
      {
        "Statement": [
          {
            "Action": [
              "sqs:ReceiveMessage",
              "sqs:SendMessage",
              "sqs:DeleteMessage",
              "sqs:GetQueueUrl",
              "sqs:GetQueueAttributes"
            ],
            "Effect": "Allow",
            "Resource": "QUEUE_ARN"
          }
        ]
      }
  sns:
    label: SNS
    policy: |-
      {
        "Statement": [
          {
            "Action": [
              "sns:Publish",
              "sns:Subscribe",
              "sns:Unsubscribe"
            ],
            "Effect": "Allow",
            "Resource": "TOPIC_ARN"
          }
        ]
      }
  rdspassrole:
    label: RDS Monitoring PassRole
    policy: |-
      {
        "Statement": [
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::<ACCOUNTID>:role/rds-monitoring-role"
          }
        ]
      }
  ses:
    label: SES
    policy: |-
      {
          "Statement": [
              {
                  "Action": [
                      "ses:SendEmail",
                      "ses:SendRawEmail"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:ses:*:123456789012:identity/saasmail.netflix.com",
                  "Condition": {
                      "StringLike": {
                          "ses:FromAddress": "SENDER@saasmail.netflix.com"
                      }
                  }
              }
          ]
      }
  sts:
    label: STS - Assume role
    policy: |-
      {
          "Statement": [
              {
                  "Action": [
                      "sts:AssumeRole"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:iam::ACCOUNT_NUMBER:role/ROLE"
              }
          ]
      }
  route53:
    label: Route53 List/Change Record Sets
    policy: |-
      {
          "Statement": [
              {
                  "Action": [
                      "route53:changeresourcerecordsets",
                      "route53:listresourcerecordsets"
                  ],
                  "Resource": [
                      "*"
                  ],
                  "Effect": "Allow"
              }
          ]
      }
  ec2_create_volume:
    label: EC2 Volmount
    policy: |-
      {
          "Statement": [
              {
                  "Action": [
                      "ec2:attachvolume",
                      "ec2:createvolume",
                      "ec2:describelicenses",
                      "ec2:describevolumes",
                      "ec2:detachvolume",
                      "ec2:reportinstancestatus",
                      "ec2:resetsnapshotattribute"
                  ],
                  "Resource": [
                      "*"
                  ],
                  "Effect": "Allow"
              }
          ]
      }
  put_cloudwatch_data:
    label: Cloudwatch - putmetricdata
    policy: |-
      {
          "Statement":[
              {
                  "Action":[
                      "cloudwatch:putmetricdata"
                  ],
                  "Effect":"Allow",
                  "Resource":[
                      "*"
                  ]
              }
          ],
          "Version":"2012-10-17"
      }
  eni_auto_attach:
    label: ENI - Auto attach
    policy: |-
      {
          "Statement":[
              {
                  "Action":[
                      "ec2:AttachNetworkInterface",
                      "ec2:Describe*",
                      "ec2:DetachNetworkInterface"
                  ],
                  "Effect":"Allow",
                  "Resource":[
                      "*"
                  ],
                  "Sid":"eniauto"
              }
          ],
          "Version":"2012-10-17"
      }
  ec2_ipv6:
    label: EC2 - AssignIpv6Addresses
    policy: |-
      {
          "Statement":[
              {
                  "Action":[
                      "ec2:AssignIpv6Addresses"
                  ],
                  "Effect":"Allow",
                  "Resource":[
                      "*"
                  ]
              }
          ]
      }
  volmount:
    label: EC2 - volmount
    policy: |-
      {
          "Statement":[
              {
                  "Action":[
                        "ec2:attachvolume",
                        "ec2:createsnapshot",
                        "ec2:createtags",
                        "ec2:createvolume",
                        "ec2:deletesnapshot",
                        "ec2:describeinstances",
                        "ec2:describetags",
                        "ec2:describevolumes",
                        "ec2:modifyinstanceattribute"
                  ],
                  "Effect":"Allow",
                  "Resource":[
                      "*"
                  ]
              }
          ]
      }

ses:
  support_reference: "Please contact us at consoleme@example.com if you have any questions or concerns."
  arn: "arn:aws:ses:us-east-1:123456789012:identity/example.com"
  consoleme:
    name: ConsoleMe
    sender: consoleme_test@example.com
challenge_url:
  enabled: true
