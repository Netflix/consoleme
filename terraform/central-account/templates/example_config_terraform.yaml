extends:
  - example_config_base.yaml

tornado:
  debug: true
  port: 8081
  xsrf: true
  uvloop: false

challenge_url:
  enabled: true

development: false
environment: prod

logging:
  stdout_enabled: true
  format: "%(asctime)s - %(levelname)s - %(name)s - [%(filename)s:%(lineno)s - %(funcName)s() ] - %(message)s"
  level: debug
  file: /logs/consoleme/consoleme_tornado.log

account_ids_to_name:
  "${current_account_id}": default_account

cache_cloud_accounts:
  from_aws_organizations: ${sync_accounts_from_organizations}

cache_accounts_from_aws_organizations:
  organizations_master_account_id: "${sync_accounts_from_organizations_master_account_id}"
  organizations_master_role_to_assume: "${sync_accounts_from_organizations_role_to_assume}"

# A development configuration can specify a specific user to impersonate locally.
_development_user_override: consolemeadmin@example.com

# A development configuration can specify specific groups to consider the user a member of locally.
_development_groups_override:
  - groupa@example.com
  - groupb@example.com
  - configeditors@example.com
  - consoleme_admins@example.com

cloud_credential_authorization_mapping:
  role_tags:
    enabled: true
    required_trust_policy_entity: arn:aws:iam::${current_account_id}:role/consolemeInstanceProfile
    authorized_groups_tags:
      - consoleme-authorized
    authorized_groups_cli_only_tags:
      - consoleme-authorized-cli-only
  dynamic_config:
    enabled: true
  internal_plugin:
    enabled: false

# You'll probably want to override default_plugins logic to generate this data with your own business logic.
application_settings:
  application_1:
    owner: consoleme_admins@example.com
    owner_url: https://www.example.com/groupa@example.com
    app_url: https://www.example.com/ci_cd_pipeline/application_1
    roles:
      - ${demo_app_role_arn_1}
  application_2:
    owner: groupb@example.com
    owner_url: https://www.example.com/groupb@example.com
    app_url: https://www.example.com/ci_cd_pipeline/application_2
    roles:
      - ${demo_app_role_arn_2}

dynamic_config:
  # You can set this key in http://YOUR_CONSOLEME_DOMAIN/config as a rudimentary way to allow groups to access
  # roles before you override get_eligible_roles with your own custom logic
  group_mapping:
    groupa@example.com:
      roles:
        - ${demo_user_role_arn_1}
    groupb@example.com:
      roles:
        - ${demo_user_role_arn_2}
    consoleme_admins@example.com:
      roles:
        - ${demo_user_role_arn_1}
        - ${demo_user_role_arn_2}

policies:
  role_name: ConsoleMeTarget

celery:
  active_region: ${region}

# TODO: SAML / Oauth / TLS configuration / Secure JWT / CLI Auth / Generic CloudTrail log support
