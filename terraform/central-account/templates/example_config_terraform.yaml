extends:
  - example_config_base.yaml

# Add a random secret to `jwt_secret`, and uncomment.. This secret is used to sign and verify authenticated
# user JWTs, which are stored as cookies in the user's browser. If you do not provide a jwt_secret,
# one will be randomly generated by each ConsoleMe instance.
# If you are load balancing requests between multiple ConsoleMe instances,
# the user will fail authentication when their request hits an instance other than the one that generated their
# auth cookie.
# jwt_secret: REPLACE_WITH_RANDOM_SECRET

tornado:
  debug: true
  port: 8081
  xsrf: true
  uvloop: false

challenge_url:
  enabled: true

# Enter your team's e-mail address here. This e-mail will be used as the default approvers of IAM policy requests
application_admin: ${application_admin}
development: false
environment: prod

logging:
  stdout_enabled: true
  format: "%(asctime)s - %(levelname)s - %(name)s - [%(filename)s:%(lineno)s - %(funcName)s() ] - %(message)s"
  level: debug
  file: /logs/consoleme/consoleme_tornado.log

account_ids_to_name:
  "${current_account_id}": default_account

cloud_credential_authorization_mapping:
  role_tags:
    enabled: true
    required_trust_policy_entity: arn:aws:iam::${current_account_id}:role/consolemeInstanceProfile
    authorized_groups_tags:
      - consoleme-authorized
    authorized_groups_cli_only_tags:
      - consoleme-authorized-cli-only
  dynamic_config:
    enabled: true
  internal_plugin:
    enabled: false

# You'll probably want to override default_plugins logic to generate this data with your own business logic.
application_settings:
  application_1:
    owner: ${application_admin}
    owner_url: https://www.example.com/groupa@example.com
    app_url: https://www.example.com/ci_cd_pipeline/application_1
    roles:
      - ${demo_app_role_arn_1}
  application_2:
    owner: ${application_admin}
    owner_url: https://www.example.com/groupb@example.com
    app_url: https://www.example.com/ci_cd_pipeline/application_2
    roles:
      - ${demo_app_role_arn_2}

dynamic_config:
  # You can set this key in http://YOUR_CONSOLEME_DOMAIN/config as a rudimentary way to allow groups to access
  # roles before you override get_eligible_roles with your own custom logic
  group_mapping:
    ${application_admin}:
      roles:
        - ${demo_user_role_arn_1}
        - ${demo_user_role_arn_2}

policies:
  role_name: ConsoleMeTarget

celery:
  active_region: ${region}

auth:
  logout_redirect_url: "${logout_url}"
  get_user_by_aws_alb_auth: true
  extra_auth_cookies:
    - AWSELBAuthSessionCookie-0
  set_auth_cookie: true
  remote_ip:
    trusted_remote_ip_header: X-Forwarded-For

get_user_by_aws_alb_auth_settings:
  jwt_email_key: ${jwt_email_key}
  jwt_groups_key: ${jwt_groups_key}

url: ${user_facing_url}
